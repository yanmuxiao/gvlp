##一、Gulp 是一个自动化工具，前端开发者可以使用它来处理常见任务：

	*搭建web服务器
	*文件保存时自动重载浏览器
	*使用预处理器如Sass、LESS
	*优化资源，比如压缩CSS、JavaScript、压缩图片
	*当然Gulp能做的远不止这些

##二、安装使用Gulp
	1. 新建项目(项目名字不能为gulp，eg:gulpProject), shift + 打开命令窗口，不要用git
	2. npm init ==> 可以一直Enter生成默认的配置文件package.json
		```javasvript
		{
		  "name": "gulpProject",
		  "version": "0.0.0",
		  "description": "",
		  "main": "index.js",
		  "scripts": {
		    "test": "echo \"Error: no test specified\" && exit 1"
		  },
		  "author": "",
		  "license": "ISC",
		  "devDependencies": {
		    "gulp": "^3.9.1"
		  }
		}
		```
	3. npm install -g gulp ==> 全局安装gulp
	4. npm install --save-dev gulp ==> 局部安装Gulp。使用—save-	dev，将通知计算机在package.json中添加gulp依赖。
	5. 在根目录先新建gulpfile.js，添加默认task:

		```javasvript
			var gulp = require('gulp');
			gulp.task('default', function() {
				console.log('default task!!!');
			})
		```
	6. 命令行执行：gulp ==>只执行gulp默认执行gulp default
		输出：default task!!!
		```javasvript
		//gulpfile.js:

			gulp.task('hello', function() {
				console.log('Hello World!!');
			})

		//执行hello task：gulp hello
		//输出：Hello World!!
		```

	7. 更加复杂的gulp task: 
		```javasvript
		gulp.task('task-name', function () {
		  return gulp.src('source-files') 
		  // Get source files with gulp.src
		    .pipe(aGulpPlugin()) 
		  // Sends it through a gulp plugin
		    .pipe(gulp.dest('destination')) // Outputs the file in the destination folder
		})

		//两个Gulp方法，src,dest
		```

	8. Gulp执行预处理

		我们使用gulp-sass插件来编译Sass。

		npm install gulp-sass --save-dev

		```javasvript
		styles.scss: 
			// styles.scss
			.testing {
			  width: percentage(5/7);
			}


		//gulpfile.js:
			var sass = require('gulp-sass');

			gulp.task('sass', function() {
				return gulp.src('app/scss/styles.scss')
					.pipe(sass()) 
					// Converts Sass to CSS with gulp-sass
					.pipe(gulp.dest('app/css'))
			})
		/*
		执行sass任务：gulp sass

			结果：在app/css目录先生成styles.css文件
			styles.css是gulp智动为我们生成的。
			percentage 是Sass的方法。

			使用Sass就这么简单。但是通常我们不止有一个scss文件。这时候可以使用Node通配符。
		*/
		```

	9. 由于npm的版本为1.4.3，安装gulp-sass是报错，解决方法：
			1). 升级npm：npm install -g npm@2.74
					   ==> 安装指定版本的npm，也可以回退
			2). 升级npm自身，则会遇到一点问题，因为nodejs附带了npm，因此无法全局升级npm，需要在nodejs的安装目录下局部升级npm：
			    D:\Program Files\nodejs> npm install npm@2.7.4
			3). (好像还要安装Python和设置环境变量)
			4). D:\0GitRepository\gulpProject>nmp install node-sass --save-dev ==> gulp-sass依赖于node-sass
			5). D:\0GitRepository\gulpProject>nmp install gulp-sass --save-dev


	10. Node中的通配符

		通配符是一种匹配模式，允许你匹配到多个文件。不止是Node，很多平台都有，有点像正则表达式。

		使用通配符，计算机检查文件名和路径进行匹配。

		大部分时候，我们只需要用到下面4种匹配模式：

		*.scss：*号匹配当前目录任意文件，所以这里*.scss匹配当前目录下所有scss文件
		**/*.scss：匹配当前目录及其子目录下的所有scss文件。
		!not-me.scss：！号移除匹配的文件，这里将移除not-me.scss
		*.+(scss|sass)：+号后面会跟着圆括号，里面的元素用|分割，匹配多个选项。这里将匹配scss和sass文件。

		```javasvript

		// Node中的通配符
		//gulpfile.js:
		gulp.task('node_tongpeifu', function() {
			return gulp.src('app/scss/*.scss').pipe(sass()).pipe(gulp.dest('app/css'));
		})
		```



	11. 监听Sass文件
		```javasvript
		//gulpfile.js:
		gulp.task('watch', function() {
			gulp.watch('app/scss/**/*.scss', [sass]);
			//Other watchers
		})

		//执行watch任务：gulp watch(sass任务不能注释掉)

		//结果：
		//例如修改styles.scss保存时, cmd窗口和对应的
		styles.css也实时更新
		```
		如何实时更新到浏览器呢？



	12. 使用Browser Sync自动刷新
		Browser Sync 帮助我们搭建简单的本地服务器并能实时刷新浏览器，它还能 同时刷新多个设备

		新插件？记住！安装，引入，使用。

		npm install brower-sync --save-dev
		==>这里没有gulp前缀，因为browser-sync支持Gulp，
		所以没有人专门去搞一个给Gulp用。

		```javasvript
		//gulpfile.js:
		var browserSync = require('browser-sync');

		gulp.task('browserSync', function() {
			browserSync({
				server: {
					baseDir: 'app'
				}
			})
		})

		//我们稍微修改一下之前的代码，让每次css文件更改都刷新一下浏览器：
		gulp.task('sass', function() {
			return gulp.src('app/scss/**/*.scss')
				.pipe(sass())
				.pipe(gulp.dest('app/css'))
				.pipe(browserSync.reload({
					stream: true
				}))
		})

		//现在我们配置好Broswer Sync了，我们需要运行
		//这两个命令。

		//我们可以在watch任务之前告知Gulp，先把browserSync和Sass任务执行了再说。
		//语法如下：
		gulp.task('watch', ['browserSync', 'sass'], function() {
			gulp.watch('app/scss/**/*.scss', ['sass']);
			//Other watchers
		})

		```
		到目前为止，我们做了下面三件事：

		可运转的web开发服务
		使用Sass预处理器
		自动刷新浏览器
		接下来说说优化方面的技巧

	13. 优化CSS和JavaScript文件

		说到优化的时候，我们需要想到：压缩，拼接。也就是减少体积和HTTP次数。
		开发者面临的主要问题是很难按照正确的顺序合并文件。

		```javascript
		<body>
		  <!--build:js js/main.min.js -->
		  <script src="js/lib/calendar.js"></script>
		  <script src="js/lib/XjQuery.js"></script>
		  <script src="js/main.js"></script>
		  <!-- endbuild -->
		</body>

		$ npm install gulp-useref --save-dev

		var useref = require('gulp-useref');
		gulp.task('useref', function(){
		  return gulp.src('app/*.html')
		        .pipe(useref())
		        .pipe(gulp.dest('dist'));
		});
		//css的合并也一样
		```

		js压缩：

		```javascript

			$ npm install gulp-uglify --save-dev

			var uglify = require('gulp-uglify');
			gulp.task('useref', function(){
			  return gulp.src('app/*.html')
			    .pipe(uglify()) // Uglifies Javascript files
			    .pipe(useref())
			    .pipe(gulp.dest('dist'))
			});

		```

		使用gulp-minify-css压缩css:

		```javascript
			//gulp-useref同样可以用在css上。除了压缩，需要区分，其它内容同js一样。所以我们使用gulp-if来做不同处理。

			var gulpIf = require('gulp-if');
			var minifyCSS = require('gulp-minify-css');

			gulp.task('useref', function(){

			  return gulp.src('app/*.html')
			    // Minifies only if it's a CSS file
			    .pipe(gulpIf('*.css', minifyCSS()))
			    // Uglifies only if it's a Javascript file
			    .pipe(gulpIf('*.js', uglify()))
			    .pipe(useref())
			    .pipe(gulp.dest('dist'))
			});

		```
	14. 使用gulp-imagemin插件优化图片

		```javascript

		$ npm install gulp-imagemin --save-dev

		var imagemin = require('gulp-imagemin');
		gulp.task('images', function(){
		  return gulp.src('app/images/**/*.+(png|jpg|gif|svg)')
		  .pipe(imagemin())
		  .pipe(gulp.dest('dist/images'))
		});

		//压缩图片可能会占用较长时间，使用 gulp-cache 插件可以减少重复压缩。

		$ npm install gulp-cache --save-dev

		var cache = require('gulp-cache');
		gulp.task('images', function(){
		  return gulp.src('app/images/**/*.+(png|jpg|jpeg|gif|svg)')
		  // Caching images that ran through imagemin
		  .pipe(cache(imagemin({
		      interlaced: true
		    })))
		  .pipe(gulp.dest('dist/images'))
		});

		```
##三、清理生成文件

	由于我们是自动生成文件，我们不想旧文件掺杂进来。

	使用 del：

	```javascript

		npm install del --save-dev

		var del = require('del');
		gulp.task('clean', function() {
		  del('dist');
		});

	```

	但是我们又不想图片被删除（图片改动的几率不大）,启用新的任务。

	```javascript

		npm install del --save-dev

		var del = require('del');
		gulp.task('clean:dist', function(callback){
		  del(['dist/**/*', '!dist/images', '!dist/images/**/*'], callback)
		});

	```
	这个任务会删除除了images/文件夹，dist下的任意文件。
	为了知道clean:dist任务什么时候完成，我们需要提供callback参数。

	在某些时候我们还是需要清除图片，所以clean任务我们还需要保留。

	```javascript
		gulp.task('clean', function(callback) {
		  del('dist');
		  return cache.clearAll(callback);
		})

	```

##五、组合Gulp任务
	我们主要有两条线路。

	第一条是开发过程，我们便以Sass，监听文件，刷新浏览器。

	第二条是优化，我们优化CSS,JavaScript,压缩图片，并把资源从app移动到dist。

	开发任务我们上面的watch已经组装好了。


	```javascript

		gulp.task('watch', ['browserSync', 'sass'], function (){
		  // ... watchers
		})

	```


	我们也做一个来执行第二条线路。

	```javascript

		gulp.task('build', [`clean`, `sass`, `useref`, `images`, `fonts`], function (){
		  console.log('Building files');
		})

	```
	但是这样Gulp会同时触发[]的事件。我们要让clean在
	其他任务之前完成。

	这里要用到 RunSequence 。
	```javascript

		$ npm install run-sequence --save-dev

		var runSequence = require('run-sequence');
		gulp.task('task-name', function(callback) {
		  runSequence('task-one', 'task-two', 'task-three', callback);
		});

	```
	执行task-name时，Gulp会按照顺序执行task-one,task-two,task-thre。
	RunSequence也允许你同时执行多个任务。

	```javascript

		gulp.task('task-name', function(callback) {
		  runSequence('task-one', ['tasks','two','run','in','parallel'], 'task-three', callback);
		});

	```


	最后，改造我们的代码：
	```javascript
		gulp.task('build', function (callback) {
		  runSequence('clean:dist',
		    ['sass', 'useref', 'images', 'fonts'],
		    callback
		  )
		})

		//开发任务我们也用runSequence:
		gulp.task('default', function (callback) {
		  runSequence(['sass','browserSync', 'watch'],
		    callback
		  )
		})
	```


##感激:
[Helkyle:https://www.w3ctrain.com/2015/12/22/gulp-for-beginners/](https://www.w3ctrain.com/2015/12/22/gulp-for-beginners/)